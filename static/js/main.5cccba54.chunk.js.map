{"version":3,"sources":["Components/AddItemForm.tsx","Components/EditSpan.tsx","Components/TodoList.tsx","App.tsx","index.tsx"],"names":["AddItemForm","props","useState","error","setError","inputValue","setInputValue","btnAddTaskStatus","setBtnAddTaskStatus","onAddItem","trim","callback","TextField","helperText","color","value","label","onChange","e","currentTarget","onKeyPress","charCode","IconButton","onClick","disabled","EditSpan","state","setState","title","setValue","onDoubleClick","variant","onBlur","autoFocus","TodoList","onFilterChangeTodoListClick","filter","innerText","changeFilterTodoList","id","changeTodoListTitle","removeTodolist","Delete","addTask","tasks","map","task","key","className","isDone","Checkbox","sx","pink","checked","onChangeTaskStatus","aria-label","removeTask","Button","ButtonAppBar","Box","flexGrow","AppBar","position","Toolbar","size","edge","mr","Typography","component","Avatar","alt","src","App","todoListID1","v1","todoListID2","todoListID3","todoListsArrays","setTodoListsArrays","setTasks","idTask","idTodoList","taskArrFiltered","t","idTdl","newTask","tl","Container","Grid","container","style","padding","todoLists","spacing","filteredTasks","item","Paper","elevation","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cccba54.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@mui/material\";\nimport AddIcon from '@mui/icons-material/Add';\n\ntype AddItemFormPropsType = {\n    callback: (title: string) => void\n}\n\nexport function AddItemForm(props: AddItemFormPropsType) {\n    const [error, setError] = useState<string | null>(null)\n    const [inputValue, setInputValue] = useState<string>(\"\")\n    const [btnAddTaskStatus, setBtnAddTaskStatus] = useState(false)\n\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        if (!e.currentTarget.value) setError('Error')\n        else setBtnAddTaskStatus(false)\n        setInputValue(e.currentTarget.value)\n    }\n\n    const onInputKeyPressChange = (e: KeyboardEvent) => {\n        setError(null)\n        if (e.charCode === 13) onAddItem()\n    }\n\n    const onAddItem = () => {\n        if (inputValue.trim() !== \"\") props.callback(inputValue)\n        else {\n            setBtnAddTaskStatus(true)\n            setError('Error')\n        }\n        setInputValue('')\n    }\n\n    return (\n        <div>\n                <TextField\n                error={!!error}\n                helperText={error}\n                color={\"primary\"}\n                value={inputValue}\n                label={\"Type the task\"}\n                onChange={onInputChange}\n                onKeyPress={onInputKeyPressChange}\n            />\n                <IconButton\n                    onClick={onAddItem}\n                    disabled={btnAddTaskStatus}\n                    color={'primary'}\n                >\n                    <AddIcon/>\n                </IconButton>\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype EditSpanPropsType = {\n    title: string\n    callback?: (title:string) => void\n}\n\nexport function EditSpan(props: EditSpanPropsType) {\n    const [state, setState] = useState(true)\n    const [value, setValue] = useState(props.title)\n\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\n        setValue(e.currentTarget.value)\n    }\n\n    const setTitle = () => {\n        props.callback && props.callback(value)\n        setState(true)\n    }\n\n    return (\n        <>\n            {state\n                ? <span onDoubleClick={() => setState(false)}>{props.title}</span>\n                : <TextField\n                    variant={\"standard\"}\n                    onChange={changeValue}\n                    value={value}\n                    onBlur={setTitle}\n                    autoFocus\n                />}\n        </>\n    )\n}","import {FilterType} from \"../App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport React from \"react\";\nimport {EditSpan} from \"./EditSpan\";\nimport {Button, Checkbox, IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport pink from \"@mui/material/colors/pink\";\n\nexport type TodoListComponentType = {\n    id: string\n    title: string\n    filter: string\n    tasks: Array<TaskType>\n    removeTask: (idTask: string, idTodoList: string) => void\n    changeFilterTodoList: (filter: FilterType, id: string) => void\n    addTask: (inputValue: string, objID: string) => void\n    onChangeTaskStatus: (id: string, isDone: boolean, objID: string) => void\n    removeTodolist: (id: string) => void\n    changeTodoListTitle: (value: string, id: string) => void\n}\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport const TodoList: React.FC<TodoListComponentType> = (props) => {\n\n    const onFilterChangeTodoListClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        let filter = e.currentTarget.innerText\n        props.changeFilterTodoList(filter, props.id)\n    }\n\n    const removeTodolist = () => props.removeTodolist(props.id)\n\n    const addTask = (inputValue: string) => props.addTask(inputValue, props.id)\n\n    return (\n        <div>\n            {/*---------------------TITLE TASK--------------------*/}\n            <h3>\n                <EditSpan\n                title={props.title}\n                callback={(value) => props.changeTodoListTitle(value, props.id)}\n            />\n                <IconButton onClick={removeTodolist} color=\"primary\">\n                    <Delete/>\n                </IconButton>\n            </h3>\n            {/*------------------------- INPUT FIELD TASK-------------------- */}\n            <AddItemForm callback={addTask}/>\n            {/*------------------------- MAP TASKS -----------------*/}\n            <div>\n                { props.tasks.map(task => {\n                    const onClickRemoveHandler = () => props.removeTask(task.id, props.id)\n                    const onChangStatusHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n                        props.onChangeTaskStatus(task.id, e.currentTarget.checked, props.id)\n                    }\n                    return (\n                        <div key={task.id}\n                            className={task.isDone ? \"is-done\" : \"\"}>\n                            <Checkbox\n                                sx={{\n                                    color: pink[800],\n                                    '&.Mui-checked': {\n                                        color: pink[600],\n                                    }\n                                }}\n                                checked={task.isDone}\n                                onChange={onChangStatusHandler}\n                            />\n                            <EditSpan title={task.title}/>\n                            <IconButton aria-label=\"delete\"\n                                        onClick={onClickRemoveHandler}\n                            >\n                                <Delete/>\n                            </IconButton>\n                        </div>\n                    )\n                })}\n            </div>\n            {/*----------------------------BUTTONS---------------------------*/}\n            <div>\n                <Button\n                    variant={props.filter === \"ALL\" ? \"contained\" : \"text\"}\n                    onClick={onFilterChangeTodoListClick}>All\n                </Button>\n                <Button\n                    color={\"primary\"}\n                    variant={props.filter === \"ACTIVE\" ? \"contained\" : \"text\"}\n                    onClick={onFilterChangeTodoListClick}>Active\n                </Button>\n                <Button\n                    color={\"secondary\"}\n                    variant={props.filter === \"COMPLETED\" ? \"contained\" : \"text\"}\n                    onClick={onFilterChangeTodoListClick}>Completed\n                </Button>\n            </div>\n        </div>\n    )\n}\n\n\n\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from \"./Components/TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport Box from '@mui/material/Box';\r\nimport {AppBar, Avatar, Button, Container, Grid, Paper, Typography} from \"@mui/material\";\r\nimport {Toolbar} from \"@mui/material\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport type FilterType = \"ALL\" | \"ACTIVE\" | \"COMPLETED\" | string\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: string\r\n}\r\nexport type TasksStateType = {\r\n    [id: string ]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListID1: string = v1();\r\n    const todoListID2: string = v1();\r\n    const todoListID3: string = v1();\r\n\r\n    //----------------------- STATE ---------------------------\r\n    const [todoListsArrays, setTodoListsArrays] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"Todo list 1\", filter: \"ALL\"},\r\n        {id: todoListID2, title: \"Todo list 2\", filter: \"ALL\"},\r\n        {id: todoListID3, title: \"Todo list 3\", filter: \"ALL\"}\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"New task\", isDone: true},\r\n            {id: v1(), title: \"New task\", isDone: false},\r\n            {id: v1(), title: \"New task\", isDone: false},\r\n            {id: v1(), title: \"New task\", isDone: false},\r\n            {id: v1(), title: \"New task\", isDone: true},\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: \"New task\", isDone: true},\r\n            {id: v1(), title: \"New task\", isDone: false},\r\n            {id: v1(), title: \"New task\", isDone: false},\r\n        ],\r\n        [todoListID3]: [\r\n            {id: v1(), title: \"New task\", isDone: true},\r\n            {id: v1(), title: \"New task\", isDone: false},\r\n            {id: v1(), title: \"New task\", isDone: false},\r\n        ]\r\n    })\r\n    //----------------------- ACTIONS ---------------------------\r\n    const removeTask = (idTask: string, idTodoList: string) => {\r\n        let taskArrFiltered = tasks[idTodoList].filter(t => t.id !== idTask)\r\n        setTasks({...tasks, [idTodoList]: taskArrFiltered})\r\n    }\r\n\r\n    const addTask = (inputValue: string, idTdl: string) => {\r\n        const newTask = {id: v1(), title: inputValue, isDone: false}\r\n        setTasks({...tasks, [idTdl]: [newTask, ...tasks[idTdl]]}) //Имутабельно\r\n    }\r\n\r\n    const onChangeTaskStatus = (id: string, isDone: boolean, idTodoList: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [idTodoList]: tasks[idTodoList].map(t => t.id === id ? {...t, isDone} : t)\r\n        })\r\n    }\r\n\r\n    const changeFilterTodoList = (filter: FilterType, id: string) => {\r\n        setTodoListsArrays(todoListsArrays.map(t => t.id === id ? {...t, filter} : t))\r\n    }\r\n\r\n    const removeTodolist = (id: string) => {\r\n        setTodoListsArrays([...todoListsArrays.filter(tl => tl.id !== id)])\r\n        delete tasks[id]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        const todoLists: TodoListType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: \"ALL\"\r\n        }\r\n        setTodoListsArrays([todoLists, ...todoListsArrays])\r\n        setTasks({...tasks, [todoLists.id]: []})\r\n    }\r\n\r\n    const changeTodoListTitle = (value: string, id: string) => {\r\n        setTodoListsArrays([...todoListsArrays.map(t => {\r\n                return t.id === id ? {...t, title: value} : t\r\n            })]\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container>\r\n                <Grid container style={{padding: \"10px\"}}>\r\n                    <AddItemForm callback={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsArrays.map(t => {\r\n                        let filteredTasks = tasks[t.id]\r\n                        if (t.filter === \"ACTIVE\") {\r\n                            filteredTasks = tasks[t.id].filter(t => !t.isDone)\r\n                        } else if (t.filter === \"COMPLETED\") {\r\n                            filteredTasks = tasks[t.id].filter(t => t.isDone)\r\n                        }\r\n                        return <Grid item>\r\n                            <Paper elevation={3} style={{padding: \"10px\"}}>\r\n                                <TodoList\r\n                                    key={t.id}\r\n                                    id={t.id}\r\n                                    title={t.title}\r\n                                    filter={t.filter}\r\n                                    tasks={filteredTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilterTodoList={changeFilterTodoList}\r\n                                    addTask={addTask}\r\n                                    onChangeTaskStatus={onChangeTaskStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function ButtonAppBar() {\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                    <Avatar alt=\"Remy Sharp\" src=\"/Assets/MyAvatar.jpg\"/>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}