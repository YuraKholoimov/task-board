{"version":3,"sources":["Components/AddItemForm.tsx","Components/EditSpan.tsx","Components/TodoList.tsx","state/todolist-reduser.ts","state/tasks-reduser.ts","App.tsx","state/store.ts","index.tsx"],"names":["AddItemForm","props","useState","error","setError","inputValue","setInputValue","btnAddTaskStatus","setBtnAddTaskStatus","onAddItem","trim","callback","TextField","helperText","color","value","label","onChange","e","currentTarget","onKeyPress","charCode","IconButton","onClick","disabled","EditSpan","state","setState","title","setValue","onDoubleClick","variant","onBlur","autoFocus","TodoList","onFilterChangeTodoListClick","filter","innerText","changeFilterTodoList","id","changeTodoListTitle","removeTodolist","Delete","addTask","tasks","map","task","key","className","isDone","Checkbox","sx","pink","checked","onChangeTaskStatus","changeTaskTitle","aria-label","removeTask","Button","todoListID1","v1","InitialStateTodolist","InitialTasksState","tasksReducer","action","type","newTask","todolistId","taskArrFiltered","t","idTask","taskId","stateCopy","ButtonAppBar","Box","flexGrow","AppBar","position","Toolbar","size","edge","mr","Typography","component","Avatar","alt","src","App","preloadedState","todoListState","useSelector","todoLists","tasksState","dispatch","useDispatch","idTodoList","removeTaskAC","idTdl","changeTaskStatusAC","changeTodolistFilterAC","changeTodolistTitleAC","Container","Grid","container","style","padding","addTodolistAC","spacing","filteredTasks","item","Paper","elevation","changeTaskTitleAC","x","localStorage","getItem","JSON","parse","rootReducer","combineReducers","tl","store","createStore","subscribe","getState","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5674861e.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@mui/material\";\nimport AddIcon from '@mui/icons-material/Add';\n\ntype AddItemFormPropsType = {\n    callback: (title: string) => void\n}\n\nexport function AddItemForm(props: AddItemFormPropsType) {\n    const [error, setError] = useState<string | null>(null)\n    const [inputValue, setInputValue] = useState<string>(\"\")\n    const [btnAddTaskStatus, setBtnAddTaskStatus] = useState(false)\n\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        if (!e.currentTarget.value) setError('Error')\n        else setBtnAddTaskStatus(false)\n        setInputValue(e.currentTarget.value)\n    }\n\n    const onInputKeyPressChange = (e: KeyboardEvent) => {\n        setError(null)\n        if (e.charCode === 13) onAddItem()\n    }\n\n    const onAddItem = () => {\n        if (inputValue.trim() !== \"\") props.callback(inputValue)\n        else {\n            setBtnAddTaskStatus(true)\n            setError('Error')\n        }\n        setInputValue('')\n    }\n\n    return (\n        <div>\n                <TextField\n                error={!!error}\n                helperText={error}\n                color={\"primary\"}\n                value={inputValue}\n                label={\"Type the task\"}\n                onChange={onInputChange}\n                onKeyPress={onInputKeyPressChange}\n            />\n                <IconButton\n                    onClick={onAddItem}\n                    disabled={btnAddTaskStatus}\n                    color={'primary'}\n                >\n                    <AddIcon/>\n                </IconButton>\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype EditSpanPropsType = {\n    title: string\n    callback?: (title:string) => void\n}\n\nexport function EditSpan(props: EditSpanPropsType) {\n    const [state, setState] = useState(true)\n    const [value, setValue] = useState(props.title)\n\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\n        setValue(e.currentTarget.value)\n    }\n\n    const setTitle = () => {\n        props.callback && props.callback(value)\n        setState(true)\n    }\n\n    return (\n        <>\n            {state\n                ? <span onDoubleClick={() => setState(false)}>{props.title}</span>\n                : <TextField\n                    variant={\"standard\"}\n                    onChange={changeValue}\n                    value={value}\n                    onBlur={setTitle}\n                    autoFocus\n                />}\n        </>\n    )\n}","import {FilterType} from \"../App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport React from \"react\";\nimport {EditSpan} from \"./EditSpan\";\nimport {Button, Checkbox, IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport pink from \"@mui/material/colors/pink\";\nimport {TaskType} from \"../state/tasks-reduser\";\n\nexport type TodoListComponentType = {\n    id: string\n    title: string\n    filter: string\n    tasks: Array<TaskType>\n    removeTask: (idTask: string, idTodoList: string) => void\n    changeFilterTodoList: (filter: FilterType, id: string) => void\n    addTask: (inputValue: string, objID: string) => void\n    onChangeTaskStatus: (id: string, isDone: boolean, objID: string) => void\n    removeTodolist: (id: string) => void\n    changeTodoListTitle: (value: string, id: string) => void\n    changeTaskTitle: (title: string, taskId: string) => void\n}\n\n\nexport const TodoList: React.FC<TodoListComponentType> = (\n    props\n) => {\n\n    const onFilterChangeTodoListClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        let filter = e.currentTarget.innerText\n        props.changeFilterTodoList(filter, props.id)\n    }\n    const removeTodolist = () => props.removeTodolist(props.id)\n    const addTask = (inputValue: string) => props.addTask(inputValue, props.id)\n\n    return (\n        <div>\n            {/*---------------------TITLE TASK--------------------*/}\n            <h3>\n                <EditSpan\n                    title={props.title}\n                    callback={(value) => props.changeTodoListTitle(value, props.id)}\n                />\n                <IconButton onClick={removeTodolist} color=\"primary\">\n                    <Delete/>\n                </IconButton>\n            </h3>\n            {/*------------------------- INPUT FIELD TASK-------------------- */}\n            <AddItemForm callback={addTask}/>\n            {/*------------------------- MAP TASKS --------------------*/}\n            <div>\n                {\n                    props.tasks.map(task => {\n                        const onClickRemoveHandler = () => props.removeTask(task.id, props.id)\n                        const onChangStatusHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n                            props.onChangeTaskStatus(task.id, e.currentTarget.checked, props.id)\n                        }\n                        const onChangeTaskTitle = (title: string) => {\n                            props.changeTaskTitle(title, task.id)\n                        }\n                        return (\n                            <div key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\n                                <Checkbox\n                                    sx={{\n                                        color: pink[800],\n                                        '&.Mui-checked': {\n                                            color: pink[600],\n                                        }\n                                    }}\n                                    checked={task.isDone}\n                                    onChange={onChangStatusHandler}\n                                />\n                                <EditSpan\n                                    title={task.title}\n                                    callback={onChangeTaskTitle}\n                                />\n                                <IconButton\n                                    aria-label=\"delete\"\n                                    onClick={onClickRemoveHandler}>\n                                    <Delete/>\n                                </IconButton>\n                            </div>\n                        )\n                    })}\n            </div>\n            {/*----------------------------BUTTONS---------------------------*/}\n            <div>\n                <Button\n                    variant={props.filter === \"ALL\" ? \"contained\" : \"text\"}\n                    onClick={onFilterChangeTodoListClick}>All\n                </Button>\n                <Button\n                    color={\"primary\"}\n                    variant={props.filter === \"ACTIVE\" ? \"contained\" : \"text\"}\n                    onClick={onFilterChangeTodoListClick}>Active\n                </Button>\n                <Button\n                    color={\"secondary\"}\n                    variant={props.filter === \"COMPLETED\" ? \"contained\" : \"text\"}\n                    onClick={onFilterChangeTodoListClick}>Completed\n                </Button>\n            </div>\n        </div>\n    )\n}\n\n\n\n","import {FilterType } from \"../App\";\nimport {v1} from \"uuid\";\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: string\n}\n\n//------------------------------ INITIAL STATE\nexport const todoListID1: string = v1();\n\nconst InitialStateTodolist = [\n    {id: todoListID1, title: \"Click to change...\", filter: \"ALL\"},\n]\n\n//------------------------------ TODOLIST REDUCER\nexport const todoListsReducer = (\n    state: TodoListType[] = InitialStateTodolist,\n    action: TodoListsActionTypes): TodoListType[] => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id !== action.todolistId)\n        case \"ADD-TODOLIST\":\n            return [...state, {id: action.todolistId, title: action.title, filter: \"ALL\"}]\n        case 'CHANGE-TODOLIST-TITLE':\n            return [...state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)]\n        case \"CHANGE-TODOLIST-FILTER\":\n            return [...state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)]\n        default:\n            return state\n    }\n}\n\n//------------------------------ ACTION TYPES\n\nexport type TodoListsActionTypes = ReturnType<typeof changeTodolistFilterAC> |\n    ReturnType<typeof addTodolistAC> |\n    ReturnType<typeof changeTodolistTitleAC> |\n    ReturnType<typeof removeTodolistAC>\n\n//------------------------------ ACTION CREATOR\nexport const changeTodolistTitleAC = (title: string, id: string ) => ({\n    type: 'CHANGE-TODOLIST-TITLE',title, id\n} as const);\nexport const removeTodolistAC = (todolistId: string) => ({\n    type: 'REMOVE-TODOLIST', todolistId\n} as const);\nexport const changeTodolistFilterAC = (filter: FilterType, id: string) => ({\n    type: \"CHANGE-TODOLIST-FILTER\", filter, id\n} as const);\n\nexport const addTodolistAC = (title: string) => ({\n    type: \"ADD-TODOLIST\", title, todolistId: v1()\n} as const)","import {v1} from \"uuid\";\nimport {addTodolistAC, removeTodolistAC, todoListID1} from \"./todolist-reduser\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type TasksStateType = {\n    [id: string]: Array<TaskType>\n}\n\n//------------------------------ ACTIONS TYPES\nexport type ActionsTasksType = ReturnType<typeof addTaskAC>\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof changeTaskStatusAC>\n    | ReturnType<typeof changeTaskTitleAC>\n    | ReturnType<typeof addTodolistAC>\n    | ReturnType<typeof removeTodolistAC>\n\n\nconst InitialTasksState = {\n    [todoListID1]: [\n        {id: v1(), title: \"Type to change...\", isDone: false},\n    ],\n}\n\n//------------------------------ TASKS REDUCER\nconst tasksReducer = (state: TasksStateType = InitialTasksState, action: ActionsTasksType): TasksStateType => {\n    switch (action.type) {\n        case \"ADD-TASK\":\n            const newTask = {id: v1(), title: action.title, isDone: false}\n            return {...state, [action.todolistId]: [newTask, ...state[action.todolistId]]}\n        case \"REMOVE-TASK\":\n            let taskArrFiltered = state[action.todolistId].filter(t => t.id !== action.idTask)\n            return {...state, [action.todolistId]: taskArrFiltered}\n        case \"CHANGE-TASK-STATUS\":\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.id ? {...t, isDone: action.isDone} : t)\n            }\n        case \"CHANGE-TASK-TITLE\":\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, title: action.title} : t)\n            }\n        case \"ADD-TODOLIST\":\n            return {\n                ...state,\n                [action.todolistId]: []\n            }\n        case 'REMOVE-TODOLIST':\n            let stateCopy = {...state}\n            delete stateCopy[action.todolistId]\n            return stateCopy\n        default:\n            return state\n    }\n}\n\n//------------------------------ ACTION CREATOR\nexport const changeTaskStatusAC = (id: string, isDone: boolean, todolistId: string) => ({\n    type: \"CHANGE-TASK-STATUS\", id, isDone, todolistId\n} as const);\nexport const removeTaskAC = (idTask: string, todolistId: string) => ({\n    type: \"REMOVE-TASK\", idTask, todolistId\n} as const);\nexport const addTaskAC = (title: string, todolistId: string) => ({\n    type: \"ADD-TASK\", title, todolistId\n} as const)\nexport const changeTaskTitleAC = (title: string, taskId: string, todolistId: string) => ({\n    type: \"CHANGE-TASK-TITLE\", title, taskId, todolistId\n} as const)\n\nexport default tasksReducer;","import React from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./Components/TodoList\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport Box from '@mui/material/Box';\r\nimport {AppBar, Avatar, Button, Container, Grid, Paper, Toolbar, Typography} from \"@mui/material\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./state/store\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    TodoListType\r\n} from \"./state/todolist-reduser\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC,\r\n    TasksStateType\r\n} from \"./state/tasks-reduser\";\r\n\r\nexport type FilterType = \"ALL\" | \"ACTIVE\" | \"COMPLETED\" | string\r\n\r\nfunction App() {\r\n    //----------------------- STATE ---------------------------\r\n    const todoListState = useSelector<AppStateType, TodoListType[]>(state => state.todoLists)\r\n    const tasksState = useSelector<AppStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    //----------------------- ACTIONS ---------------------------\r\n    const removeTask = (idTask: string, idTodoList: string) => {\r\n        dispatch(removeTaskAC(idTask, idTodoList))\r\n    }\r\n\r\n    const addTask = (inputValue: string, idTdl: string) => dispatch(addTaskAC(inputValue, idTdl))\r\n\r\n    const onChangeTaskStatus = (id: string, isDone: boolean, idTodoList: string) => {\r\n        dispatch(changeTaskStatusAC(id, isDone, idTodoList))\r\n    }\r\n    const changeFilterTodoList = (filter: FilterType, id: string) => {\r\n        dispatch(changeTodolistFilterAC(filter, id))\r\n    }\r\n    const removeTodolist = (id: string) => dispatch(removeTodolistAC(id))\r\n\r\n    const addTodoList = (title: string) => dispatch(addTodolistAC(title))\r\n\r\n    const changeTodoListTitle = (value: string, id: string) => {\r\n        dispatch(changeTodolistTitleAC(value, id))\r\n    }\r\n    const changeTaskTitle = (title: string, taskId: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(title, taskId, todolistId))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container>\r\n                <Grid container style={{padding: \"10px\"}}>\r\n                    <AddItemForm callback={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoListState.map(t => {\r\n                            let filteredTasks = tasksState[t.id]\r\n                            if (t.filter === \"ACTIVE\") {\r\n                                filteredTasks = tasksState[t.id].filter(t => !t.isDone)\r\n                            } else if (t.filter === \"COMPLETED\") {\r\n                                filteredTasks = tasksState[t.id].filter(t => t.isDone)\r\n                            }\r\n                            return (\r\n                                <Grid item key={t.id}>\r\n                                    <Paper elevation={3} style={{padding: \"10px\"}}>\r\n                                        <TodoList\r\n                                            id={t.id}\r\n                                            title={t.title}\r\n                                            filter={t.filter}\r\n                                            tasks={filteredTasks}\r\n                                            removeTask={removeTask}\r\n                                            changeFilterTodoList={changeFilterTodoList}\r\n                                            addTask={addTask}\r\n                                            onChangeTaskStatus={onChangeTaskStatus}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                            changeTaskTitle={(title, taskId) => changeTaskTitle(title, taskId, t.id )}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function ButtonAppBar() {\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                    <Avatar alt=\"Remy Sharp\" src=\"/Assets/MyAvatar.jpg\"/>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\nimport tasksReducer from \"./tasks-reduser\";\nimport {todoListsReducer} from \"./todolist-reduser\";\n\nexport type AppStateType = ReturnType<typeof rootReducer>\n\n\nlet preloadedState;\nlet x = localStorage.getItem('Trello')\n    if(x) preloadedState = JSON.parse(x)\n\nconst rootReducer = combineReducers({\n   tasks: tasksReducer,\n    todoLists: todoListsReducer,\n})\nexport const store = createStore(rootReducer, preloadedState);\n\nstore.subscribe(() => {\n    const state = store.getState()\n    localStorage.setItem(\"Trello\", JSON.stringify(state))\n})\n\nexport  const state = store.getState()\n\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}